# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GlobeBuilderDialog
                                 A QGIS plugin
 This plugin adds Globe view
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2020-01-10
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Gispo Ltd.
        email                : joona@gispo.fi
 ***************************************************************************/

"""
import json
import os
import sys

from PyQt5.QtCore import pyqtSlot, QSettings, QUrl
from PyQt5.QtNetwork import QNetworkAccessManager, QNetworkRequest, QNetworkReply
from qgis.PyQt import QtWidgets
from qgis.PyQt import uic
# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
# Path append made in order to use image resource in dialog https://gis.stackexchange.com/a/202162/123927
from qgis.core import Qgis, QgsMessageLog

sys.path.append(os.path.dirname(__file__))
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'globe_builder_dialog_base.ui'), resource_suffix='')


class GlobeBuilderDialog(QtWidgets.QDialog, FORM_CLASS):
    DEFAULT_MAX_NUMBER_OF_RESULTS = 5
    MAX_NAME_PARTS = 3
    NOMINATIM_URL = "https://nominatim.openstreetmap.org/search/{query}?limit={limit}&format=geojson"

    def __init__(self, parent=None):
        """Constructor."""
        super(GlobeBuilderDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        self.network_access_manager = QNetworkAccessManager()
        self.network_access_manager.finished.connect(self.on_search_response)

        self.spinBoxMaxResults.setValue(
            QSettings().value("/GlobeBuilder/maxNumberOfResults",
                              GlobeBuilderDialog.DEFAULT_MAX_NUMBER_OF_RESULTS,
                              type=int))

        self.geolocations = {}

    # Without this annotation the signal is handled twice,
    # see https://stackoverflow.com/questions/14311578/event-signal-is-emmitted-twice-every-time
    @pyqtSlot(bool)
    def on_radioButtonCoordinates_toggled(self, isChecked):
        self.lineEditLonLat.setEnabled(isChecked)

    @pyqtSlot(bool)
    def on_radioButtonGeocoding_toggled(self, isChecked):
        self.lineEditGeocoding.setEnabled(isChecked)
        self.pushButtonSearch.setEnabled(isChecked)
        self.listWidgetGeocodingResults.setEnabled(isChecked)
        self.spinBoxMaxResults.setEnabled(isChecked)

    @pyqtSlot(int)
    def on_spinBoxMaxResults_valueChanged(self, value):
        QSettings().setValue("/GlobeBuilder/maxNumberOfResults", value)

    @pyqtSlot()
    def on_pushButtonSearch_clicked(self):
        text = self.lineEditGeocoding.text()
        if len(text):
            self.geocode(text)

    def geocode(self, query):
        self.listWidgetGeocodingResults.clear()
        self.geolocations.clear()

        params = {
            'query': query,
            'limit': self.spinBoxMaxResults.value()
        }
        url = GlobeBuilderDialog.NOMINATIM_URL.format(**params)

        QgsMessageLog.logMessage(url, "GlobeBuilder", Qgis.Info)
        geocoding_request = QNetworkRequest()
        geocoding_request.setUrl(QUrl(url))
        self.network_access_manager.get(geocoding_request)

    def on_search_response(self, search_result):
        error = search_result.error()
        if error == QNetworkReply.NoError:
            bytes_string = search_result.readAll()
            data_string = str(bytes_string, 'utf-8')

            result = json.loads(data_string)

            for f in result['features']:
                name_parts = f['properties']['display_name'].split(",")
                name = "{} ({})".format(",".join(
                    name_parts[0:min(GlobeBuilderDialog.MAX_NAME_PARTS, len(name_parts) - 1)]),
                    name_parts[-1].strip()) if len(name_parts) > 1 else name_parts[0]
                coordinates = f['geometry']['coordinates']
                self.listWidgetGeocodingResults.addItem(name)
                self.geolocations[name] = coordinates

    def get_geocoded_coordinates(self):
        coordinates = None
        if len(self.geolocations) and self.listWidgetGeocodingResults.count() > 0:
            geolocation = self.listWidgetGeocodingResults.currentItem().text()
            coordinates = self.geolocations.get(geolocation, None)
            coordinates = {'lon': coordinates[0], 'lat': coordinates[1]}

        return coordinates
